
/*
Calculates the position of a particle that bounces within a range.
Can be combined in 2D or 3D.
*/
float utils_bounce (in vec2 range, in float start, in float vel, in float time) {
	if (vel == 0.0) {
		return start;
	}
	
	float r = range.y - range.x;
	if (r == 0.0) {
		return range.x;	
	}
	
	start = (start - range.x) / r;
	vel = vel / r;
	float t0 = (1.0 - start) / vel;
	float ti = 1.0 / vel;
	float m = mod ((time - t0) / ti, 2.0);
	m = m > 1.0 ? 2.0 - m : m;
	return m * r + range.x;
}

/*
Returns true if a coordinate is in an infinite checker pattern
given by the rectangle as reference.
*/
bool utils_checker (vec4 rect, vec2 pos) {
	pos = mod (pos - rect.xy, 2.0 * rect.zw) / rect.zw;
	return (pos.x >= 1.0) ^^ (pos.y < 1.0);
}

/*
Returns true if a coordinate is within the radius of a circle.
*/
bool utils_circle (vec2 center, float radius, vec2 pos) {
	vec2 d = pos - center;
	return length (d) < radius;
}

/*
Returns true if a coordinate is within the range of a donut.
*/
bool utils_donut (vec2 center, vec2 range, vec2 pos) {
	vec2 d = pos - center;
	float len = length (d);
	return len >= range.x && len < range.y;
}

/*
Returns true if a coordinate is within an ellipse.
*/
bool utils_ellipse (vec4 rect, vec2 pos) {
	float r = rect.w / rect.z;
	pos.xy -= rect.xy + 0.5 * rect.zw;
	pos.x *= r;
	r = 0.5 * rect.w;
	float d = length (pos);
	return d < r;
}

/*
Returns true if coordinate is within an ellipse border.
*/
bool utils_ellipse_border (vec4 rect, float border, vec2 pos) {
	vec4 re = rect + vec4 (-0.5 * border, -0.5 * border, border, border);
	vec2 p = pos;
	float r = re.w / re.z;
	p.xy -= re.xy + 0.5 * re.zw;
	p.x *= r;
	r = 0.5 * re.w;
	float d = length (p);
	bool outer = d < r;
	
	re = rect - vec4 (-0.5 * border, -0.5 * border, border, border);
	p = pos;
	r = re.w / re.z;
	p.xy -= re.xy + 0.5 * re.zw;
	p.x *= r;
	r = 0.5 * re.w;
	d = length (p);
	bool inner = d < r;
	
	return outer && !inner;
}

/*
Returns interpolated factor at coordinate by two control points.
*/
float utils_gradient(
	in vec2 pos1,
	in vec2 pos2,
	in vec2 pos) 
{
	vec2 normal = normalize(pos2 - pos1);
	float f = (dot(pos, normal) - dot(pos1, normal)) / length(pos2 - pos1);
	return clamp(f, 0.0, 1.0);
}

/*
Returns the position of fragment coordination centered at screen.
The height maps from -0.5 to 0.5 and the width is adjusted accordingly.
*/
vec2 utils_position (vec2 resolution) {
	vec2 pos = gl_FragCoord.xy / resolution.xy - vec2(0.5, 0.5);
	pos.x *= resolution.x / resolution.y;
	return pos;
}

/*
Returns true if a coordinate is within a rectangle.
*/
bool utils_rectangle (vec4 rect, vec2 pos) {
	return pos.x >= rect.x &&
		pos.y >= rect.y &&
		pos.x < rect.x + rect.z &&
		pos.y < rect.y + rect.w;
}

/*
Returns true if a coordinate is within a rectangle border.
*/
bool utils_rectangle_border (vec4 rect, float border, vec2 pos) {
	border *= 0.5;
	bool outer = pos.x >= rect.x - border &&
		pos.y >= rect.y - border &&
		pos.x < rect.x + rect.z + border &&
		pos.y < rect.y + rect.w + border;
	bool inner = pos.x >= rect.x + border &&
		pos.y >= rect.y + border &&
		pos.x < rect.x + rect.z - border &&
		pos.y < rect.y + rect.w - border;
	return outer && !inner;
}

/*
Maps from one scale to another.
*/
float utils_remap(
	in float x,
	in float start0,
	in float end0,
	in float start1,
	in float end1)
{
	float f = (x - start0) / (end0 - start0);
	return start1 + f * (end1 - start1);
}

/*
Maps from {-infinity, infinity}
to {0, 1}.
*/
float utils_sigmoid (float x) {
	return 1.0 / (1.0 + exp(-x));	
}
